//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameUtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameUtil), typeof(System.Object));
		L.RegFunction("SayHello", SayHello);
		L.RegFunction("TestFloat", TestFloat);
		L.RegFunction("New", _CreateGameUtil);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameUtil(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameUtil obj = new GameUtil();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameUtil.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SayHello(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			GameUtil.SayHello();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TestFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			float[] arg0 = ToLua.CheckNumberArray<float>(L, 1);
			float o = GameUtil.TestFloat(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

